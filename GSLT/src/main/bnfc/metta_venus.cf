{-
    MeTTa IL: Language Syntax Definition
-}

-- A module is a collection of decls and instances
-- and communications between instances.

ModuleImpl . Module ::= [Import] "Module" Name "{" [Prog] "}" ;

ImportModuleAs . Import ::= "import" String "as" Ident ;
ImportFromModule . Import ::= "import" Ident "from" String ;
[] . [Import] ::= ;
(:) . [Import] ::= Import [Import] ;

ProgSpaceDecl . Prog ::= SpaceDecl ;
ProgTheoryDecl . Prog ::= TheoryDecl ;
ProgSpaceInst . Prog ::= "space" SpaceInst ;
ProgTheoryInst . Prog ::= "theory" TheoryInst ;

ProgRecv . Prog ::= FactComprehension ;
separator nonempty Prog "" ;

-- A Space is a GSLT and a FactBase

_. SpaceInst  ::= SpaceInst1 ;
_. SpaceInst1  ::= SpaceInst2 ;
_. SpaceInst2  ::= SpaceInst3 ;
_. SpaceInst3  ::= SpaceInst4 ;
_. SpaceInst4  ::= SpaceInst5 ;
_. SpaceInst5  ::= SpaceInst6 ;
_. SpaceInst6  ::= SpaceInst7 ;
_. SpaceInst7 ::= "{" SpaceInst "}" ;

SpaceInstEmpty . SpaceInst7 ::= "NilSpace" ;
SpaceInstCtor . SpaceInst7 ::= DottedPath "(" [SpaceInst] ")" ;
SpaceInstK . SpaceInst7 ::= SpaceInst7 "=>" "{" [Prog] "}" ;
SpaceInstRef . SpaceInst7 ::= Ident ;
SpaceInstRec . SpaceInst7 ::= "let" Ident "=" SpaceInst7 "in" "(" SpaceInst7 ")";
SpaceInstTail . SpaceInst7 ::= "tail" "(" SpaceInst7 ")" ;
SpaceInstSup . SpaceInst7 ::= "sup" "(" SpaceInst7 ")" ;
SpaceInstInf . SpaceInst7 ::= "inf" "(" SpaceInst7 ")";
SpaceInstComp . SpaceInst6 ::= SpaceInst6 "::" SpaceInst7 ;
SpaceInstConj . SpaceInst5 ::= SpaceInst5 "/\\" SpaceInst6 ;
SpaceInstDisj . SpaceInst4 ::= SpaceInst4 "\\/" SpaceInst5 ;
SpaceInstSub . SpaceInst3 ::= SpaceInst3 "\\" SpaceInst4 ;
SpaceInstRest . SpaceInst2 ::= SpaceInst2 "<|" SpaceInst3 ;
SpaceInstGCD . SpaceInst1 ::= SpaceInst1 "**" SpaceInst2 ;
SpaceInstPar . SpaceInst ::= SpaceInst "|" SpaceInst1 ;
separator SpaceInst "," ;

_. TheoryInst  ::= TheoryInst1 ;
_. TheoryInst1 ::= TheoryInst2 ;
_. TheoryInst2 ::= TheoryInst3 ;
_. TheoryInst3 ::= TheoryInst4 ;
_. TheoryInst4 ::= TheoryInst5 ;
_. TheoryInst5 ::= TheoryInst6 ;
_. TheoryInst6 ::= "{" TheoryInst "}" ;

TheoryInstEmpty . TheoryInst6 ::= "Empty" ;
TheoryInstAddExports . TheoryInst5 ::= TheoryInst5 "Exports" "{" [Export] "}" ;
TheoryInstAddReplacements . TheoryInst5 ::= TheoryInst5 "Replacements" "{" [Replacement] "}" ;
TheoryInstAddTerms . TheoryInst5 ::= TheoryInst5 "Terms" "{" Grammar "}" ;
TheoryInstAddEquations . TheoryInst5 ::= TheoryInst5 "Equations" "{" [Equation] "}" ;
TheoryInstAddRewrites . TheoryInst5 ::= TheoryInst5 "Rewrites" "{" [RewriteDecl] "}" ;
TheoryInstCtor . TheoryInst5 ::= DottedPath "(" [TheoryInst] ")" ;
TheoryInstRef . TheoryInst5 ::= Ident ;
TheoryInstRec . TheoryInst5 ::= "let" Ident "=" TheoryInst5 "in" "(" TheoryInst5 ")";
TheoryInstFree . TheoryInst5 ::= "free" "(" DottedPath ")" ;
TheoryInstConj . TheoryInst4 ::= TheoryInst4 "/\\" TheoryInst5 ;
TheoryInstDisj . TheoryInst3 ::= TheoryInst3 "\\/" TheoryInst4 ;
TheoryInstSubtract . TheoryInst2 ::= TheoryInst2 "\\" TheoryInst3 ;
separator TheoryInst "," ;

BasePres . Pres ::= "Presentation" "Exports" "{" [Cat] "}" "Terms" "{" [Def] "}" "Equations" "{" [Equation] "}" "Rewrites" "{" [RewriteDecl] "}" ;

BaseSpaceDecl . SpaceDecl ::= "Space" Name "(" [VariableDecl] ")" "{" [Fact] [FactComprehension] "}" ;
BaseTheoryDecl . TheoryDecl ::= "Theory" Name "(" [VariableDecl] ")" "{" TheoryInst "}" ;

VarDecl . VariableDecl ::= Ident ":" DottedPath ;
separator VariableDecl "," ;

BaseDottedPath . DottedPath ::= Ident ;
QualifiedDottedPath . DottedPath ::= Ident "." DottedPath ;

-- Names
NameWildcard. Name ::= "_" ;
NameVar.      Name ::= Ident ;
--NameQuote.    Name ::= "@" Proc12 ;
separator Name "," ;

NameRemainderVar.   NameRemainder ::= "..." "@" Ident ;
NameRemainderEmpty. NameRemainder ::= "" ;

FactImpl . Fact ::= Item ;
separator nonempty Fact ";" ;

PRecv.           FactComprehension ::= "for" "(" [Receipt] ")" SpaceInst7 ;
PSend.           FactComprehension ::= Name Send "(" [Fact] ")" ;
PSendEmtpy.      FactComprehension ::= Name Send "(" ")" ;
PSendSynch.      FactComprehension ::= Name "!?" "(" [Fact] ")" SynchSendCont ;
PSendSynchEmpty. FactComprehension ::= Name "!?" "(" ")" SynchSendCont ;
separator FactComprehension "," ;

-- Receipt
ReceiptLinear.        Receipt ::= ReceiptLinearImpl ;
ReceiptRepeated.      Receipt ::= ReceiptRepeatedImpl ;
ReceiptPeek.          Receipt ::= ReceiptPeekImpl ;
-- ReceiptSymm
ReceiptSymmLinear.    Receipt ::= ReceiptSymmLinearImpl ;
ReceiptSymmRepeated.  Receipt ::= ReceiptSymmRepeatedImpl ;
ReceiptSymmPeek.      Receipt ::= ReceiptSymmPeekImpl ;
separator nonempty Receipt ";" ;

-- Linear Receipts
LinearSimple. ReceiptLinearImpl ::= [LinearBind] ;
-- Implementing this will be tricky.
-- for (x <- a; y <- b if *x)
-- LinearCond.   Linear ::= [LinearBind] "if" Proc ;

-- Single Linear Bind
LinearBindImpl. LinearBind ::= [Name] NameRemainder "<-" NameSource ;
separator nonempty LinearBind "&" ;

SimpleSource.         NameSource ::= Name ;
Self.                 NameSource ::= "self" ;
ReceiveSendSource.    NameSource ::= Name "?!" ;
SendReceiveSource.    NameSource ::= Name "!?" "(" [Fact] ")" ;

-- Repeated Receipts
RepeatedSimple. ReceiptRepeatedImpl ::= [RepeatedBind] ;
-- Single Repeated Bind
RepeatedBindImpl. RepeatedBind ::= [Name] NameRemainder "<=" Name ;
separator nonempty RepeatedBind "&" ;

-- Peek Receipts
PeekSimple. ReceiptPeekImpl ::= [PeekBind] ;
-- Single Peek
PeekBindImpl. PeekBind ::= [Name] NameRemainder "<<-" Name ;
separator nonempty PeekBind "&" ;

-- Linear ReceiptSymms
LinearSymmSimple. ReceiptSymmLinearImpl ::= [LinearBindSymm] ;
-- Implementing this will be tricky.
-- for (x <- a; y <- b if *x)
-- LinearCond.   Linear ::= [LinearBindSymm] "if" Proc ;

-- Single Linear BindSymm
LinearBindSymmImpl. LinearBindSymm ::= [Name] NameRemainder "<->" NameSource ;
separator nonempty LinearBindSymm "&" ;

-- Repeated ReceiptSymms
RepeatedSymmSimple. ReceiptSymmRepeatedImpl ::= [RepeatedBindSymm] ;
-- Single Repeated BindSymm
RepeatedBindSymmImpl. RepeatedBindSymm ::= [Name] NameRemainder "<=>" Name ;
separator nonempty RepeatedBindSymm "&" ;

-- Peek ReceiptSymms
PeekSymmSimple. ReceiptSymmPeekImpl ::= [PeekBindSymm] ;
-- Single Peek
PeekBindSymmImpl. PeekBindSymm ::= [Name] NameRemainder "<<->>" Name ;
separator nonempty PeekBindSymm "&" ;

EmptyCont.      SynchSendCont ::= "." ;
NonEmptyCont.   SynchSendCont ::= ";" SpaceInst ;

-- Types of Send:
SendSingle.   Send ::= "!" ;
SendMultiple. Send ::= "!!" ;
SendSymm.     Send ::= "!$" ;

-- Exports

BaseExport . Export ::= Cat ;
RenameExport . Export ::= Cat "=>" Cat ;

[]  . [Export] ::= ;
(:) . [Export] ::= Export ";" [Export] ;

-- Replacements

SimpleRepl . Replacement ::= IntList Label "." Cat "=>" Def;

[]  . [Replacement] ::= ;
(:) . [Replacement] ::= Replacement ";" [Replacement] ;

-- A Grammar is a sequence of definitions

MkGrammar . Grammar ::= [Def] ;

[]  . [Def] ::= ;
(:) . [Def] ::= Def ";" [Def] ;

[]  . [Item] ::= ;
(:) . [Item] ::= Item [Item] ;

--The rules of the grammar
Rule . Def ::= Label "." Cat "::=" [Item] ;

-- Items
Terminal         . Item ::= String ;
NTerminal        . Item ::= Cat ;
AbsNTerminal     . Item ::= "(" Ident ")" Item;
BindNTerminal    . Item ::= "(" "Bind" Ident Cat ")" ;

-- Categories
ListOfCat   . Cat ::= "[" Cat "]" ;
IdCat       . Cat ::= Ident ;
ImportedCat . Cat ::= Ident "." Cat ;
ArrowCat    . Cat ::= "(" Cat "->" Cat ")";

[] . [Cat] ::= ;
(:) . [Cat] ::= Cat ";" [Cat] ;

-- functional labels
Id       . Label ::= Ident ;
Wild     . Label ::= "_" ;
ListE    . Label ::= "[" "]" "{" Cat "}" ;
ListCons . Label ::= "(" ":" ")" "{" Cat "}" ;
ListOne  . Label ::= "(" ":" "[" "]" ")" "{" Cat "}" ;
-- ForAll   . Label ::= "Forall" Cat "." Label ;

-- profiles (= permutation and binding patterns)
ProfIt   . ProfItem ::= "(" "[" [IntList] "]" "," "[" [Integer] "]" ")" ;

Ints     . IntList ::= "[" [Integer] "]" ;

separator Integer "," ;
separator IntList "," ;
terminator nonempty ProfItem "" ;

-- Pragmas
Comment  .  Def ::= "comment" String ;
Comments .  Def ::= "comment" String String ;
Internal .  Def ::= "internal" Label "." Cat "::=" [Item] ;
Token.      Def ::= "token" Ident Reg ;
PosToken.   Def ::= "position" "token" Ident Reg ;
Entryp.     Def ::= "entrypoints" [Ident] ;
Separator.  Def ::= "separator" MinimumSize Cat String ;
Terminator. Def ::= "terminator" MinimumSize Cat String ;
Coercions.  Def ::= "coercions" Ident Integer ;
Rules.      Def ::= "rules" Ident "::=" [RHS] ;

Layout.     Def ::= "layout" [String] ;
LayoutStop. Def ::= "layout" "stop" [String] ;
LayoutTop.  Def ::= "layout" "toplevel" ;

separator nonempty String "," ;

separator nonempty RHS "|" ;
MkRHS. RHS ::= [Item] ;

-- List size condition
MNonempty.  MinimumSize ::= "nonempty" ;
MEmpty.     MinimumSize ::=  ;

-- regular expressions
RSeq.   Reg2 ::= Reg2 Reg3 ;
RAlt.   Reg1 ::= Reg1 "|" Reg2 ;
RMinus. Reg1 ::= Reg2 "-" Reg2 ;

RStar.  Reg3 ::= Reg3 "*" ;
RPlus.  Reg3 ::= Reg3 "+" ;
ROpt.   Reg3 ::= Reg3 "?" ;

REps.   Reg3 ::= "eps" ;

RChar.  Reg3 ::= Char ;           -- single character
RAlts.  Reg3 ::= "[" String "]" ; -- list of alternative characters
RSeqs.  Reg3 ::= "{" String "}" ; -- character sequence

RDigit.  Reg3 ::= "digit" ;
RLetter. Reg3 ::= "letter" ;
RUpper.  Reg3 ::= "upper" ;
RLower.  Reg3 ::= "lower" ;
RAny.    Reg3 ::= "char" ;

_. Reg  ::= Reg1 ;
_. Reg1 ::= Reg2 ;
_. Reg2 ::= Reg3 ;
_. Reg3 ::= "(" Reg ")" ;

-- list of categories in the entrypoint pragma
(:[]).  [Ident] ::= Ident ;
(:).    [Ident] ::= Ident "," [Ident] ;

-- Equations

EquationFresh . Equation ::= "if" Ident "#" Ident "then" Equation ;
EquationImpl . Equation ::= AST "==" AST ;
[]  . [Equation] ::= ;
(:) . [Equation] ::= Equation ";" [Equation] ;

-- Rewrites

RDecl . RewriteDecl ::= Ident ":" Rewrite ;
separator RewriteDecl ";" ;

RewriteBase    . Rewrite ::= AST "~>" AST ;
RewriteContext . Rewrite ::= "let" Hypothesis "in" Rewrite ;

ASTSubst . AST ::= "(" "Subst" AST AST Ident ")";
ASTVar   . AST ::= Ident ;
ASTSExp  . AST ::= "(" Label [AST] ")" ;

[]  . [AST] ::= ;
(:) . [AST] ::= AST [AST] ;

Hyp . Hypothesis ::= Ident "~>" Ident ;

--token Var (((letter | '\'') (letter | digit | '_' | '\'')*)|(('_') (letter | digit | '_' | '\'')+)) ;

--token CapIdent (((upper | '\'') (letter | digit | '_' | '\'')*)|(('_') (letter | digit | '_' | '\'')+)) ;

--token Ident (((upper | '\'') (letter | digit | '_' | '\'')*)|(('_') (letter | digit | '_' | '\'')+)) ;

-- comments in BNF source
comment "--" ;
comment "{-" "-}" ;