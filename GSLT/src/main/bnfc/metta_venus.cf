{-
    MeTTa IL: Language Syntax Definition
-}

-- A module is a collection of decls and instances
-- and communications between instances.

ModuleImpl . Module ::= [Import] "Module" Name "{" [Prog] "}" ;

ImportModuleAs . Import ::= "import" String "as" Ident ;
ImportModule . Import ::= "import" String ;
ImportFromModule . Import ::= "import" Ident "from" String ;
[] . [Import] ::= ;
(:) . [Import] ::= Import [Import] ;

ProgDecl . Prog ::= Decl ;
ProgInst . Prog ::= Inst ;
ProgRecv . Prog ::= FactComprehension ;
separator nonempty Prog "" ;

-- A Space is a GSLT and a FactBase

_. Inst  ::= Inst1 ;
_. Inst1  ::= Inst2 ;
_. Inst2  ::= Inst3 ;
_. Inst3  ::= Inst4 ;
_. Inst4  ::= Inst5 ;
_. Inst5  ::= Inst6 ;
_. Inst6  ::= Inst7 ;
_. Inst7 ::= "{" Inst "}" ;

InstAddExports . Inst7 ::= Inst7 "." "addExports" "(" [Export] ")" ;
InstAddReplacements . Inst7 ::= Inst7 "." "addReplacements" "(" [Replacement] ")" ;
InstAddTerms . Inst7 ::= Inst7 "." "addTerms" "(" Grammar ")" ;
InstAddEquations . Inst7 ::= Inst7 "." "addEquations" "(" [Equation] ")" ;
InstAddRewrites . Inst7 ::= Inst7 "." "addRewrites" "(" [RewriteDecl] ")" ;
InstEmpty . Inst7 ::= "Nil" ;
InstCtor . Inst7 ::= Name "(" [Inst] ")" ;
InstCtorK . Inst7 ::= Name "(" [Inst] ")" "=>" "{" [Prog] "}" ;
InstRef . Inst7 ::= Ident ;
InstRec . Inst7 ::= "let" Ptrn "=" Inst7 "in" "(" Inst7 ")";
InstTail . Inst7 ::= "tail" "(" Inst7 ")" ;
InstSup . Inst7 ::= "sup" "(" Inst7 ")" ;
InstInf . Inst7 ::= "inf" "(" Inst7 ")";
InstFree . Inst7 ::= "free" "(" Name ")" ;
InstFreeL . Inst7 ::= "free" "(" Name ")" "=>" "{" [Prog] "}" ;
InstComp . Inst6 ::= Inst6 "::" Inst7 ;
InstConj . Inst5 ::= Inst5 "/\\" Inst6 ;
InstDisj . Inst4 ::= Inst4 "\\/" Inst5 ;
InstSub . Inst3 ::= Inst3 "\\" Inst4 ;
InstRest . Inst2 ::= Inst2 "<|" Inst3 ;
InstGCD . Inst1 ::= Inst1 "**" Inst2 ;
InstPar . Inst ::= Inst "|" Inst1 ;
separator nonempty Inst "," ;

PtrnSeq . Ptrn ::= "(" [Ptrn] ")" ;
PtrnInst . Ptrn ::= Inst1 ;
separator Ptrn "," ;

SpaceDecl   . Decl ::= "Space" Name "(" [VariableDecl] ")" "{" [Fact] [FactComprehension] "}" ;
GSLTDeclAll . Decl ::= "Theory" Name "(" [VariableDecl] ")" "{" Inst "}" ;

VarDecl . VariableDecl ::= Ident ":" DottedPath ;
separator VariableDecl "," ;

BaseDottedPath . DottedPath ::= Ident ;
QualifiedDottedPath . DottedPath ::= Ident "." DottedPath ;

-- Names
NameWildcard. Name ::= "_" ;
NameVar.      Name ::= Ident ;
--NameQuote.    Name ::= "@" Proc12 ;
separator Name "," ;

NameRemainderVar.   NameRemainder ::= "..." "@" Ident ;
NameRemainderEmpty. NameRemainder ::= "" ;

FactImpl . Fact ::= Item ;
separator nonempty Fact ";" ;

PRecv.           FactComprehension ::= "for" "(" [Receipt] ")" Inst7 ;
PSend.           FactComprehension ::= Name Send "(" [Fact] ")" ;
PSendEmtpy.      FactComprehension ::= Name Send "(" ")" ;
PSendSynch.      FactComprehension ::= Name "!?" "(" [Fact] ")" SynchSendCont ;
PSendSynchEmpty. FactComprehension ::= Name "!?" "(" ")" SynchSendCont ;
separator FactComprehension "," ;

-- Receipt
ReceiptLinear.        Receipt ::= ReceiptLinearImpl ;
ReceiptRepeated.      Receipt ::= ReceiptRepeatedImpl ;
ReceiptPeek.          Receipt ::= ReceiptPeekImpl ;
-- ReceiptSymm
ReceiptSymmLinear.    Receipt ::= ReceiptSymmLinearImpl ;
ReceiptSymmRepeated.  Receipt ::= ReceiptSymmRepeatedImpl ;
ReceiptSymmPeek.      Receipt ::= ReceiptSymmPeekImpl ;
separator nonempty Receipt ";" ;

-- Linear Receipts
LinearSimple. ReceiptLinearImpl ::= [LinearBind] ;
-- Implementing this will be tricky.
-- for (x <- a; y <- b if *x)
-- LinearCond.   Linear ::= [LinearBind] "if" Proc ;

-- Single Linear Bind
LinearBindImpl. LinearBind ::= [Name] NameRemainder "<-" NameSource ;
separator nonempty LinearBind "&" ;

SimpleSource.         NameSource ::= Name ;
Self.                 NameSource ::= "self" ;
ReceiveSendSource.    NameSource ::= Name "?!" ;
SendReceiveSource.    NameSource ::= Name "!?" "(" [Fact] ")" ;

-- Repeated Receipts
RepeatedSimple. ReceiptRepeatedImpl ::= [RepeatedBind] ;
-- Single Repeated Bind
RepeatedBindImpl. RepeatedBind ::= [Name] NameRemainder "<=" Name ;
separator nonempty RepeatedBind "&" ;

-- Peek Receipts
PeekSimple. ReceiptPeekImpl ::= [PeekBind] ;
-- Single Peek
PeekBindImpl. PeekBind ::= [Name] NameRemainder "<<-" Name ;
separator nonempty PeekBind "&" ;

-- Linear ReceiptSymms
LinearSymmSimple. ReceiptSymmLinearImpl ::= [LinearBindSymm] ;
-- Implementing this will be tricky.
-- for (x <- a; y <- b if *x)
-- LinearCond.   Linear ::= [LinearBindSymm] "if" Proc ;

-- Single Linear BindSymm
LinearBindSymmImpl. LinearBindSymm ::= [Name] NameRemainder "<->" NameSource ;
separator nonempty LinearBindSymm "&" ;

-- Repeated ReceiptSymms
RepeatedSymmSimple. ReceiptSymmRepeatedImpl ::= [RepeatedBindSymm] ;
-- Single Repeated BindSymm
RepeatedBindSymmImpl. RepeatedBindSymm ::= [Name] NameRemainder "<=>" Name ;
separator nonempty RepeatedBindSymm "&" ;

-- Peek ReceiptSymms
PeekSymmSimple. ReceiptSymmPeekImpl ::= [PeekBindSymm] ;
-- Single Peek
PeekBindSymmImpl. PeekBindSymm ::= [Name] NameRemainder "<<->>" Name ;
separator nonempty PeekBindSymm "&" ;

EmptyCont.      SynchSendCont ::= "." ;
NonEmptyCont.   SynchSendCont ::= ";" Inst ;

-- Types of Send:
SendSingle.   Send ::= "!" ;
SendMultiple. Send ::= "!!" ;
SendSymm.     Send ::= "!$" ;

-- Exports

BaseExport . Export ::= Ident ;

[]  . [Export] ::= ;
(:) . [Export] ::= Export ";" [Export] ;

-- Replacements

SimpleRepl . Replacement ::= Label "." Cat "=>" Def ;

[]  . [Replacement] ::= ;
(:) . [Replacement] ::= Replacement ";" [Replacement] ;

-- A Grammar is a sequence of definitions

MkGrammar . Grammar ::= [Def] ;

[]  . [Def] ::= ;
(:) . [Def] ::= Def ";" [Def] ;

[]  . [Item] ::= ;
(:) . [Item] ::= Item [Item] ;

--The rules of the grammar
Rule . Def ::= Label "." Cat "::=" [Item] ;

-- Items
Terminal         . Item ::= String ;
NTerminal        . Item ::= Cat ;

-- BindTerminal Item
BindTerminal . Item ::= "(" "Bind" Ident IntList ")" ;
-- Ident defines the category C of the variable; a new rule
--   IdC . C ::= Ident
-- Error if Ident is already the RHS of a rule for C.
-- IntList specifies where in the term the variable is bound.
--    Lam. T ::= "Î»" (Bind T [1]) "." T                             -- bound in body
--    For. P ::= "for" "(" (Bind Name [2]) "<-" Ident ")" "{" P "}" -- not bound in channel name
-- Can bind the variable in subterms appearing before the binder.
--    Foo. P ::= "foo" P "bar" (Bind P [0, 3]) "baz" P ":" P        -- not bound in slot 2
-- Error if the list is empty, contains its own slot, or contains
--    a number greater than or equal to the number of slots.
-- Effectively adds Ident as RHS of new rule.
-- Parser generated from GSLT accepts Ident in this position.


-- Categories
ListCat     . Cat ::= "[" Cat "]" ;
IdCat       . Cat ::= Ident ;
ImportedCat . Cat ::= Ident "." Cat;

-- labels with or without profiles
LabNoP   . Label ::= LabelId ;
LabP     . Label ::= LabelId [ProfItem] ;
LabPF    . Label ::= LabelId LabelId [ProfItem] ;
LabF     . Label ::= LabelId LabelId ;

-- functional labels
Id       . LabelId ::= Ident ;
Wild     . LabelId ::= "_" ;
ListE    . LabelId ::= "[" "]" ;
ListCons . LabelId ::= "(" ":" ")" ;
ListOne  . LabelId ::= "(" ":" "[" "]" ")" ;

-- profiles (= permutation and binding patterns)
ProfIt   . ProfItem ::= "(" "[" [IntList] "]" "," "[" [Integer] "]" ")" ;

Ints     . IntList ::= "[" [Integer] "]" ;

separator Integer "," ;
separator IntList "," ;
terminator nonempty ProfItem "" ;

-- Pragmas
Comment  .  Def ::= "comment" String ;
Comments .  Def ::= "comment" String String ;
Internal .  Def ::= "internal" Label "." Cat "::=" [Item] ;
Token.      Def ::= "token" Ident Reg ;
PosToken.   Def ::= "position" "token" Ident Reg ;
Entryp.     Def ::= "entrypoints" [Ident] ;
Separator.  Def ::= "separator" MinimumSize Cat String ;
Terminator. Def ::= "terminator" MinimumSize Cat String ;
Coercions.  Def ::= "coercions" Ident Integer ;
Rules.      Def ::= "rules" Ident "::=" [RHS] ;

Layout.     Def ::= "layout" [String] ;
LayoutStop. Def ::= "layout" "stop" [String] ;
LayoutTop.  Def ::= "layout" "toplevel" ;

separator nonempty String "," ;

separator nonempty RHS "|" ;
MkRHS. RHS ::= [Item] ;

-- List size condition
MNonempty.  MinimumSize ::= "nonempty" ;
MEmpty.     MinimumSize ::=  ;

-- regular expressions
RSeq.   Reg2 ::= Reg2 Reg3 ;
RAlt.   Reg1 ::= Reg1 "|" Reg2 ;
RMinus. Reg1 ::= Reg2 "-" Reg2 ;

RStar.  Reg3 ::= Reg3 "*" ;
RPlus.  Reg3 ::= Reg3 "+" ;
ROpt.   Reg3 ::= Reg3 "?" ;

REps.   Reg3 ::= "eps" ;

RChar.  Reg3 ::= Char ;           -- single character
RAlts.  Reg3 ::= "[" String "]" ; -- list of alternative characters
RSeqs.  Reg3 ::= "{" String "}" ; -- character sequence

RDigit.  Reg3 ::= "digit" ;
RLetter. Reg3 ::= "letter" ;
RUpper.  Reg3 ::= "upper" ;
RLower.  Reg3 ::= "lower" ;
RAny.    Reg3 ::= "char" ;

_. Reg  ::= Reg1 ;
_. Reg1 ::= Reg2 ;
_. Reg2 ::= Reg3 ;
_. Reg3 ::= "(" Reg ")" ;

-- list of categories in the entrypoint pragma
(:[]).  [Ident] ::= Ident ;
(:).    [Ident] ::= Ident "," [Ident] ;

-- Equations

EquationFresh . Equation ::= "if" Ident "#" Ident "then" Equation ;
EquationImpl . Equation ::= AST "==" AST ;
[]  . [Equation] ::= ;
(:) . [Equation] ::= Equation ";" [Equation] ;

-- Rewrites

RDecl . RewriteDecl ::= Ident ":" Rewrite ;
separator RewriteDecl ";" ;

RewriteBase    . Rewrite ::= AST "~>" AST ;
RewriteContext . Rewrite ::= "let" Hypothesis "in" Rewrite ;

ASTSubst . AST ::= "(" "Subst" AST AST Ident ")";
ASTVar   . AST ::= Ident ;
ASTSExp  . AST ::= "(" Ident [AST] ")" ;

[]  . [AST] ::= ;
(:) . [AST] ::= AST [AST] ;

Hyp . Hypothesis ::= Ident "~>" Ident ;

--token Var (((letter | '\'') (letter | digit | '_' | '\'')*)|(('_') (letter | digit | '_' | '\'')+)) ;

--token CapIdent (((upper | '\'') (letter | digit | '_' | '\'')*)|(('_') (letter | digit | '_' | '\'')+)) ;

--token Ident (((upper | '\'') (letter | digit | '_' | '\'')*)|(('_') (letter | digit | '_' | '\'')+)) ;

-- comments in BNF source
comment "--" ;
comment "{-" "-}" ;