{-
    MeTTa IL: Language definition
-}

-- A Space is a GSLT and a FactBase

SpaceDeclNoDepsImpl . SpaceDecl ::= "Space" Name "(" [VariableDecl] ")" "=" "{" [Fact] [FactComprehension] "}" ;
SpaceDeclDepsImpl . SpaceDecl ::= "Space" Name "(" [VariableDecl] ";" [VariableDecl] ")" "=" "{" [Fact] [FactComprehension] "}" ;

SpaceInstImpl . SpaceInst ::= Name "(" [ThInst] ";" [SpaceInst] ")" ;
SpaceInstRec . SpaceInst ::= "let" Var "=" SpaceInst "in" SpaceInst ;
SpaceInstRef . SpaceInst ::= Var ;
separator SpaceInst "," ; 

-- Names
NameWildcard. Name ::= "_" ;
NameVar.      Name ::= Var ;
--NameQuote.    Name ::= "@" Proc12 ;
separator Name "," ;

NameRemainderVar.   NameRemainder ::= "..." "@" Var ;
NameRemainderEmpty. NameRemainder ::= "" ;

VarDecl . VariableDecl ::= Var ":" Name ;
separator VariableDecl "," ;

FactImpl . Fact ::= Item ;
separator Fact "," ;

FactComprehensionImpl . FactComprehension ::= "for" "(" [ReceiptSymm] ")" "{" SpaceInst "}" ;
separator FactComprehension "," ;

-- ReceiptSymm
ReceiptSymmLinear.    ReceiptSymm ::= ReceiptSymmLinearImpl ;
ReceiptSymmRepeated.  ReceiptSymm ::= ReceiptSymmRepeatedImpl ;
ReceiptSymmPeek.      ReceiptSymm ::= ReceiptSymmPeekImpl ;
separator nonempty ReceiptSymm ";" ;

-- Linear ReceiptSymms
LinearSymmSimple. ReceiptSymmLinearImpl ::= [LinearBindSymm] ;
-- Implementing this will be tricky.
-- for (x <- a; y <- b if *x)
-- LinearCond.   Linear ::= [LinearBindSymm] "if" Proc ;

-- Single Linear BindSymm
LinearBindSymmImpl. LinearBindSymm ::= [Name] NameRemainder "<->" NameSymmSource ;
separator nonempty LinearBindSymm "&" ;

SimpleSymmSource.         NameSymmSource ::= Name ;
ReceiveSendSymmSource.    NameSymmSource ::= Name "?!" ;
SendReceiveSymmSource.    NameSymmSource ::= Name "!?" "(" [Fact] ")" ;

-- Repeated ReceiptSymms
RepeatedSymmSimple. ReceiptSymmRepeatedImpl ::= [RepeatedBindSymm] ;
-- Single Repeated BindSymm
RepeatedBindSymmImpl. RepeatedBindSymm ::= [Name] NameRemainder "<=>" Name ;
separator nonempty RepeatedBindSymm "&" ;

-- Peek ReceiptSymms
PeekSymmSimple. ReceiptSymmPeekImpl ::= [PeekBindSymm] ;
-- Single Peek
PeekBindSymmImpl. PeekBindSymm ::= [Name] NameRemainder "<<->>" Name ;
separator nonempty PeekBindSymm "&" ;

-- A GSLT is a Grammar, a set of equations, and a list of rewrite rules

GSLTDecl . ThDecl ::= "Theory" Name "(" [VariableDecl] ")" "=" "{" FreeTheory ";" Equations ";" Rewrites "}" ;

GSLTInst . ThInst ::= Name "(" [ThInst] ")" ;
GSLTRec . ThInst ::= "let" Var "=" ThInst "in" ThInst ;
GSLTRef . ThInst ::= Var ;
separator ThInst "," ;

Generators . FreeTheory ::= "Terms" "{" Grammar "}" ;
Relations . Equations ::= "Equations" "{" [Equation] "}" ;
Transitions . Rewrites ::= "Rewrites" "{" [Rewrite] "}" ;

-- A Grammar is a sequence of definitions

MkGrammar . Grammar ::= [Def] ;

[]  . [Def] ::= ;
(:) . [Def] ::= Def ";" [Def] ;

[]  . [Item] ::= ;
(:) . [Item] ::= Item [Item] ;

--The rules of the grammar
Rule . Def ::= Label "." Cat "::=" [Item] ;

-- Items
Terminal  . Item ::= String ;
NTerminal . Item ::= Cat ;

-- Categories
ListCat  . Cat ::= "[" Cat "]" ;
IdCat    . Cat ::= Ident ;

-- labels with or without profiles
LabNoP   . Label ::= LabelId ;
LabP     . Label ::= LabelId [ProfItem] ;
LabPF    . Label ::= LabelId LabelId [ProfItem] ;
LabF     . Label ::= LabelId LabelId ;

-- functional labels
Id       . LabelId ::= Ident ;
Wild     . LabelId ::= "_" ;
ListE    . LabelId ::= "[" "]" ;
ListCons . LabelId ::= "(" ":" ")" ;
ListOne  . LabelId ::= "(" ":" "[" "]" ")" ;

-- profiles (= permutation and binding patterns)
ProfIt   . ProfItem ::= "(" "[" [IntList] "]" "," "[" [Integer] "]" ")" ;

Ints     . IntList ::= "[" [Integer] "]" ;

separator Integer "," ;
separator IntList "," ;
terminator nonempty ProfItem "" ;

-- Pragmas
Comment  .  Def ::= "comment" String ;
Comments .  Def ::= "comment" String String ;
Internal .  Def ::= "internal" Label "." Cat "::=" [Item] ;
Token.      Def ::= "token" Ident Reg ;
PosToken.   Def ::= "position" "token" Ident Reg ;
Entryp.     Def ::= "entrypoints" [Ident] ;
Separator.  Def ::= "separator" MinimumSize Cat String ;
Terminator. Def ::= "terminator" MinimumSize Cat String ;
Coercions.  Def ::= "coercions" Ident Integer ;
Rules.      Def ::= "rules" Ident "::=" [RHS] ;

Layout.     Def ::= "layout" [String] ;
LayoutStop. Def ::= "layout" "stop" [String] ;
LayoutTop.  Def ::= "layout" "toplevel" ;

separator nonempty String "," ;

separator nonempty RHS "|" ;
MkRHS. RHS ::= [Item] ;

-- List size condition
MNonempty.  MinimumSize ::= "nonempty" ;
MEmpty.     MinimumSize ::=  ;

-- regular expressions
RSeq.   Reg2 ::= Reg2 Reg3 ;
RAlt.   Reg1 ::= Reg1 "|" Reg2 ;
RMinus. Reg1 ::= Reg2 "-" Reg2 ;

RStar.  Reg3 ::= Reg3 "*" ;
RPlus.  Reg3 ::= Reg3 "+" ;
ROpt.   Reg3 ::= Reg3 "?" ;

REps.   Reg3 ::= "eps" ;

RChar.  Reg3 ::= Char ;           -- single character
RAlts.  Reg3 ::= "[" String "]" ; -- list of alternative characters
RSeqs.  Reg3 ::= "{" String "}" ; -- character sequence

RDigit.  Reg3 ::= "digit" ;
RLetter. Reg3 ::= "letter" ;
RUpper.  Reg3 ::= "upper" ;
RLower.  Reg3 ::= "lower" ;
RAny.    Reg3 ::= "char" ;

_. Reg  ::= Reg1 ;
_. Reg1 ::= Reg2 ;
_. Reg2 ::= Reg3 ;
_. Reg3 ::= "(" Reg ")" ;

-- list of categories in the entrypoint pragma
(:[]).  [Ident] ::= Ident ;
(:).    [Ident] ::= Ident "," [Ident] ;

-- Equations

[] .  [Equation] ::= ;
(:) . [Equation] ::= Equation ";" [Equation] ;

EquationImpl . Equation ::= Item "==" Item ;

-- Rewrites

[] .  [Rewrite] ::= ;
(:) . [Rewrite] ::= Rewrite ";" [Rewrite] ;

BaseCase . Rewrite ::= Transform ;
Recursion . Rewrite ::= Hypotheses "=>" Transform ;

[] .  [Transform] ::= ;
(:) . [Transform] ::= Transform "&" [Transform] ;

TransformImpl . Transform ::= Item "->" Item ;

HypothesesImpl . Hypotheses ::= [Transform] ;

token Var (((letter | '\'') (letter | digit | '_' | '\'')*)|(('_') (letter | digit | '_' | '\'')+)) ;

-- comments in BNF source
comment "--" ;
comment "{-" "-}" ;