Theory rhocalc () = {
  Terms {
    PZero . Proc ::= "0" ;
    PPar  . Proc ::= Proc "|" Proc ;
    PSend . Proc ::= Name "!" "(" Proc ")" ;
    PRecv . Proc ::= "for" "(" (Bind [2]) "<-" Name ")" "{" Proc "}" ;
    PDrop . Proc ::= "*" Proc ;

    NQuote . Name ::= "@" Proc ;
  };
  Equations {
    ( PPar.Proc P Q ) == ( PPar.Proc Q P ) ;
    ( PPar.Proc ( PPar.Proc P Q ) R ) == ( PPar.Proc P ( PPar.Proc Q R ) ) ;
    ( PPar.Proc P ( PZero.Proc ) ) == P ;
    ( PDrop.Proc ( NQuote.Name P ) ) == P ;
    ( NQuote.Name ( PDrop.Proc N ) ) == N ;
  };
  Rewrites {
    RComm : ( PPar.Proc (PRecv.Proc y x P) ( PSend.Proc x Q)  ) ~> (Subst P (NQuote.Name Q) y) ;
    RPar1 : let Src ~> Tgt in 
            ( PPar.Proc Src Q ) ~> ( PPar.Proc Tgt Q ) ;
    RPar2 : let Src1 ~> Tgt1 in 
            let Src2 ~> Tgt2 in 
            ( PPar.Proc Src1 Src2 ) ~> ( PPar.Proc Tgt1 Tgt2 ) ;
  }
}
