Module UnivAlg {
  Theory Monoid() {
    new()
      .addExports(
        Proc;
      )
      .addTerms(
        One . Proc ::= "1" ;
        Mult . Proc ::= "(" Proc "*" Proc ")" ;
      )
      .addEquations(
        (Mult (Mult x y) z) == (Mult x (Mult y z));
        (Mult x (One)) == x;
        (Mult (One) x) == x;
      )
  }

  Theory CommutativeMonoid(m: u.Monoid) {
    m
      .addExports(
        Proc;
      )
      .addEquations(
        (Mult x y) == (Mult y x);
      )
  }
  
  Theory Rig(add: CommutativeMonoid, mult: Monoid) {
    add
      .union(mult)
      .addEquations (
        (Mult x (Plus y z)) == (Plus (Mult x y) (Mult x z));
        (Mult (Plus x y) z) == (Plus (Mult x z) (Mult y z));
        (Mult x (Zero)) == (Zero);
        (Mult (Zero) x) == (Zero);
      )
  }

  Theory Group(m: Monoid) {
    m
      .addTerms (
        Inv . Proc ::= "inv" "(" Proc ")" ;
      )
      .addEquations (
        (Mult x (Inv x)) == (One);
        (Inv (Inv x)) == x;
        (Inv (Mult x y)) == (Mult (Inv y) (Inv x));
      )
  }

  Theory AbelianGroup(g: Group, c: CommutativeMonoid) {
    g
      .addReplacements (
        One . Proc => Zero . Proc ::= "0" ;
        Mult . Proc => Plus . Proc ::= "(" Proc "+" Proc ")" ;
        Inv . Proc => Neg . Proc ::= "(" "-" Proc ")" ;
      )
      .union(c)
  }

  Theory Ring(r: Rig, add: AbelianGroup) {
    r.union(add)
  }
}