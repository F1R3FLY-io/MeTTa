Theory NewReplCalc(pm: ParMonoid) {
  Exports {
    Proc extends pm.Proc ;
    Name ;
  }
  Terms {
    PRepl . Proc ::= "!" Proc ;
    PNew  . Proc ::= "new" (Bind Name [1]) "in" Proc ;
  }
  Equations {
    if x # Q then
      ( PPar ( PNew x P ) Q ) == ( PNew x ( PPar P Q ) ) ;
    ( PNew x ( PNew x P ) ) == ( PNew x P ) ;
    ( PNew x ( PNew y P ) ) == ( PNew y ( PNew x P ) ) ;
    ( PRepl P ) == ( PPar P ( PRepl P ) ) ;
  }
  Rewrites {
    RNew  : let Src ~> Tgt in
            (PNew x Src) ~> (PNew x Tgt) ;
  }
}
