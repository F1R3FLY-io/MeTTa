Theory TreeCalc() {
  Exports { T; }
  Terms {
    D . T ::= "Î”" ;
    App . T ::= "(" T T ")" ;

    Let . T ::= "let" (Bind T [2]) "=" T "in" T ;
    New . T ::= "new" (Bind T [1]) "in" T ;
  }
  Equations {
    if x # Q then (App (New x P) Q) == (New x (App P Q)) ;
  }
  Rewrites {
    K : (App (App (App (D) (D)) y) z) ~> y ;
    S : (App (App (App (D) (App (D) x)) y) z) ~>
        (App (App y z) (App x z)) ;
    F : (App (App (D) (App (App (D) w) x) y) z) ~>
        (App (App z w) x) ;
    head : let Src ~> Tgt in
           (App Src x) ~> (App Tgt x) ;
    let1 : let Src ~> Tgt in
           (Let x Src y) ~> (Let x Tgt y) ;
    let2 : let Src ~> Tgt in
           (Let x y Src) ~> (Let x y Tgt) ;
    let3 : let Src1 ~> Tgt1 in
           let Src2 ~> Tgt2 in
           (Let x Src1 Src2) ~> (Let x Tgt1 Tgt2) ;
    beta : (Let x y z) ~> (Subst z y x) ;
    new : let Src ~> Tgt in
          (New x Src) ~> (New x Tgt) ;
  }
}
